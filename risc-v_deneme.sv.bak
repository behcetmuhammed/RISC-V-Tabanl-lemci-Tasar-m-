/*
ADD: A + B
• SUB: A - B
• SLL: A << B
• SLR: A >> B
• SRA: A >>> B
• SEQ: A == B
• SLT: A < B
• SLTU: $unsigned(A) < $unsigned(B)
• XOR: A ^ B
• OR: A | B
• AND: A & B
*/
always_comb begin
	case(alu_function)	
		5'b00001: result = operand_a + operand_b; //ADD
		
		5'b00010: result = operand_a - operand_b; //SUB
		
		5'b00011: result = operand_a << operand_b; //SLL
		
		5'b00100: result = operand_a >> operand_b; //SRL
		
		5'b00101: result = operand_a >>> operand_b; //SRA
		
		5'b00110: begin if (operand_a == operand_b) result=31'b1; //SEQ
					else result=31'b0;
					end 
		
		5'b00111: begin if (operand_a < operand_b) result=31'b1; //SLT
					else result=31'b0;
					end 
		5'b00000: begin if ($unsigned(operand_a) < $unsigned(operand_b)) result=31'b1; //SLTU
					else result=31'b0;
					end 
						
		5'b01001: result = operand_a ^ operand_b; //XOR
		
		5'b01010: result = operand_a | operand_b; //OR
						
		5'b01011: result = operand_a & operand_b; //AND
		
		default: result =31'b0; //default
	endcase
end 

assign result_equal_rero = (result ==32'b0);

endmodule